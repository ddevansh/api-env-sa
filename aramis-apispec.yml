---
openapi: 3.0.2
info:
  title: Aramis
  version: 1.0.0
  description: APIs to interact with ARAMIS System
paths:
  /assets:
    summary: Path used to get a paginated list of assets.
    description: The REST endpoint/path used to list and create an `asset` entity.  This
      path contains a `GET` and `POST` operation to perform the list and create tasks,
      respectively.
    servers:
    - url: http://viperon.env.sa.gov.au:10101/aramissvc/v1
      description: ""
    get:
      servers:
      - url: http://viperon.env.sa.gov.au:10101/aramissvc/v1
        description: ""
      tags:
      - asset-apis
      parameters:
      - name: parkId
        description: |-
          This is a required parameter. Must provide ID of the park to which the assets belongs to.
          Multiple parkId query parameters can be used in the same call for retrieving the assets / checkout
          E.g. &parkId=1217&parkId=1216&parkId=1214
        schema:
          type: integer
        in: query
        required: true
      - name: limit
        description: This is an optional parameter. Maximum number of results in the
          response, enter an integer between 1 - 500. The default maximum number of
          assets in a response will be 500
        schema:
          type: integer
        in: query
        required: false
      - name: offset
        description: This is an optional parameter. Used for Pagination index. The
          default value is 0
        schema:
          type: integer
        in: query
        required: false
      - name: action
        description: This is an optional parameter. Action to be performed when getting
          the assets, valid parameter value is 'checkout'
        schema:
          enum:
          - checkout
          type: string
        in: query
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets-page'
          description: Successful response - returns an array of `asset` entities.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
          description: Unable to process the request successfully
        "500":
          description: Unexpected error occurred when processing the request
      security:
      - HTTP-Basic: []
      operationId: getresource-assets
      summary: List All assets in a park
      description: Gets a list of all `asset` entities in a park
    post:
      requestBody:
        description: A new `asset` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset'
        required: true
      tags:
      - asset-apis
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
          description: Successful response. When an asset is successfully created
            using POST request
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
          description: Response when create is unsuccessful
        "500":
          description: When unexpected error occurs when processing the request
      security:
      - HTTP-Basic: []
      operationId: createresource-asset
      summary: Create an asset
      description: Creates a new instance of an `asset`.
  /assets/asset/{assetId}:
    summary: Path used to manage a single `asset`.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `asset`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    servers:
    - url: http://viperon.env.sa.gov.au:10101/aramissvc/v1
      description: ""
    get:
      tags:
      - asset-apis
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset'
          description: Successful response - returns a single `asset`.
        "501":
          description: This operation is not currently implemented
      security:
      - HTTP-Basic: []
      operationId: getresource-asset
      summary: Get an asset
      description: Gets the details of a single instance of a `asset`.
    put:
      requestBody:
        description: Updated `asset` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/asset'
        required: true
      tags:
      - asset-apis
      responses:
        "202":
          description: Successful response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
          description: Unable to process the request, request is incorrect
        "500":
          description: Unexpected error occurred when processing the request
      operationId: updateresource-asset
      summary: Update an asset
      description: Updates an existing `asset`.
    delete:
      tags:
      - asset-apis
      responses:
        "204":
          description: Successful response.
      operationId: deleteresource-asset
      summary: Delete an asset
      description: Deletes an existing `asset`.
    parameters:
    - name: assetId
      description: A unique identifier for a `asset`.
      schema:
        type: string
      in: path
      required: true
  /assets/summary:
    servers:
    - url: http://viperon.env.sa.gov.au:10101/aramissvc/v1
      description: ""
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/asset-summary'
              examples:
                asset summary response:
                  value:
                    allAssetIds:
                    - 81
                    - 58
                    lockedAssets:
                    - assetLockId: 1
                      username: some text
                      lockDate: 2018-02-10T09:30Z
                      mpBatchId: 58
                      verifyStatusId: 44
                      lockMessage: some text
                      assetId: 81
                    - assetLockId: 1
                      username: some text
                      lockDate: 2018-02-10T09:30Z
                      mpBatchId: 46
                      verifyStatusId: 95
                      lockMessage: some text
                      assetId: 58
                    totalAssets: 2
                    totalLineAssets: 1
                    totalNonspatialAssets: 1
                    totalPointAssets: 0
                    totalPolyAssets: 0
          description: Returns details about the assets in a park
        "500":
          description: Unexpected error occurred when processing the request
    parameters:
    - name: parkId
      description: Park Id to get the asset summary
      schema:
        type: integer
      in: query
      required: true
  /checkout/cancel/{checkoutId}:
    summary: Removes locks on all the assets of that checkoutId
    description: |-
      Available operations

      `PUT` : Removes locks on all the assets of that checkoutId
    servers:
    - url: http://viperon.env.sa.gov.au:10101/aramissvc/v1
      description: ""
    put:
      parameters:
      - name: checkoutId
        schema:
          type: integer
        in: path
        required: true
      responses:
        "204":
          description: Response when a checkout is cancelled successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
          description: Unable to process the request, request is incorrect
      security:
      - HTTP-Basic: []
      summary: Removes locks on all the assets of that checkoutId
      description: Removes locks on all the assets of that checkoutId
    parameters:
    - name: checkoutId
      in: path
      required: true
  /lookups/{tableId}:
    summary: Gets data from a lookup table
    description: |-
      Available operations

      `GET` : Gets data from a lookup table
    servers:
    - url: http://viperon.env.sa.gov.au:10101/aramissvc/v1
      description: ""
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/lookup-detail'
              examples:
                sample lookup detail:
                  value:
                  - id: 1
                    parentId: 1
                    value: Buildings
                  - id: 22
                    parentId: 2
                    value: Fire Equipment
          description: Array of `lookup-detail`
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
          description: Unable to process the request, request is incorrect
        "500":
          description: Unexpected error occurred when processing the request
      security:
      - HTTP-Basic: []
      summary: Gets data from a lookup table
    parameters:
    - name: tableId
      schema:
        type: integer
      in: path
      required: true
  /images:
    summary: Path used to insert image metadata into the database.
    description: The REST endpoint/path used to create an `image` entity.  This path
      contains a `POST` operation to perform the create task.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image'
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response-message'
          description: Response when the create is unsuccessful
        "500":
          description: When unexpected error occurs when processing the request
        "201":
          description: Successful response. When an image is successfully created
            using POST request
      security:
      - HTTP-Basic: []
      summary: Create an image
      description: Creates a new instance of an `image`
components:
  schemas:
    asset:
      title: Root Type for resource-asset
      description: 'Asset data type '
      type: object
      properties:
        assetId:
          type: integer
        readonly:
          type: boolean
        captureId:
          type: integer
        codedId:
          type: string
        actionStatusId:
          type: integer
        actionDate:
          format: date-time
          description: The datetime string must follow the ISO8601 format "yyyy-MM-dd'T'HH:mm:ss±hh:mm"
          type: string
        accountCodeActivity:
          type: integer
        accountCodeBusinessCentre:
          type: integer
        accountCodeObject:
          type: integer
        accountCodeOutput:
          type: integer
        accountCodeProjectNo:
          type: integer
        invoiceNumber:
          type: string
        invoiceDate:
          format: date-time
          description: The datetime string must follow the ISO8601 format "yyyy-MM-dd'T'HH:mm:ss±hh:mm"
          type: string
        assetDescription:
          type: string
        ownerId:
          type: integer
        maintainerId:
          type: integer
        assetConditionId:
          type: integer
        assessmentMethodId:
          type: integer
        newAssetComment:
          type: string
        assetTypeGradeTypeDescId:
          type: integer
        assetTypeGradeTypeId:
          type: integer
        assetTypeDescriptionId:
          type: integer
        assetTypeNameId:
          type: integer
        assetTypeClassId:
          type: integer
        assetTypeGroupId:
          type: integer
        locationType:
          type: integer
        directorateId:
          type: integer
        branchId:
          type: integer
        managementUnitId:
          type: integer
        buildingLocationId:
          type: integer
        parkId:
          type: integer
        siteId:
          type: integer
        subsiteId:
          type: integer
        dimensionId:
          type: integer
        measureId:
          type: integer
        primaryQuantity:
          type: number
        registrationPlate:
          type: string
        custodian:
          type: string
        modelId:
          type: integer
        makeId:
          type: integer
        barcodeTitleId:
          type: integer
        disposalId:
          type: integer
        disposalReason:
          type: string
        disposalDate:
          format: date-time
          description: The datetime string must follow the ISO8601 format "yyyy-MM-dd'T'HH:mm:ss±hh:mm"
          type: string
        inspectorId:
          type: integer
        inspectionDate:
          format: date-time
          description: The datetime string must follow the ISO8601 format "yyyy-MM-dd'T'HH:mm:ss±hh:mm"
          type: string
        agencyCompanyId:
          type: integer
        geometry:
          type: string
        heritageRegisterNameId:
          type: integer
        imageCount:
          type: integer
        isReplaceable:
          type: boolean
      example:
        assetId: 7
        readonly: true
        captureId: 2
        codedId: some text
        actionStatusId: 96
        actionDate: 2018-02-10T00:00:00+09:30
        accountCodeActivity: 14
        accountCodeBusinessCentre: 1
        accountCodeObject: 41
        accountCodeOutput: 40
        accountCodeProjectNo: 81
        invoiceNumber: some text
        invoiceDate: 2018-02-10T00:00:00+09:30
        assetDescription: some text
        ownerId: 66
        maintainerId: 28
        assetConditionId: 57
        assessmentMethodId: 76
        newAssetComment: some text
        assetTypeGradeTypeDescId: 99
        assetTypeGradeTypeId: 90
        assetTypeDescriptionId: 13
        assetTypeNameId: 97
        assetTypeClassId: 82
        assetTypeGroupId: 82
        locationType: 29
        directorateId: 17
        branchId: 70
        managementUnitId: 46
        buildingLocationId: 8
        parkId: 11
        siteId: 28
        subsiteId: 31
        dimensionId: 64
        measureId: 90
        primaryQuantity: 35.62
        registrationPlate: some text
        custodian: some text
        modelId: 63
        makeId: 61
        barcodeTitleId: 92
        disposalId: 2
        disposalReason: some text
        disposalDate: 2018-02-10T00:00:00+09:30
        inspectorId: 83
        inspectionDate: 2018-02-10T00:00:00+09:30
        agencyCompanyId: 9
        geometry: some text
        heritageRegisterNameId: 64
        isReplaceable: true
    action-links:
      title: Root Type for asset-action
      description: Available actions on a resource (viz asset or park)
      type: object
      properties:
        checkin-url:
          description: URL to checkin an asset or park. This link is available only
            if the asset or park can be checked in
          type: string
      example:
        checkin-url: /assets/asset/{assetId}
    asset-lock:
      description: Lock details of an asset
      type: object
      properties:
        assetLockId:
          type: integer
        username:
          type: string
        lockDate:
          format: date-time
          type: string
        mpBatchId:
          type: integer
        verifyStatusId:
          type: integer
        lockMessage:
          type: string
        assetId:
          description: ""
          type: integer
      example:
        assetLockId: 67
        username: some text
        lockDate: 2018-02-10T00:00:00+09:30
        mpBatchId: 99
        verifyStatusId: 67
        lockMessage: some text
        assetId: 84
    assets-page:
      description: Page of assets
      required:
      - assets
      - navigation
      type: object
      properties:
        assets:
          description: Array of assets
          type: array
          items:
            $ref: '#/components/schemas/asset-detail'
        navigation:
          $ref: '#/components/schemas/navigation-links'
          description: Details about navigating between pages of assets
      example:
        assets:
        - assetLock:
            assetLockId: 14
            username: some text
            lockDate: 2018-02-10T09:30Z
            mpBatchId: 46
            verifyStatusId: 91
            lockMessage: some text
            assetId: 2
          asset:
            assetId: 89
            readonly: true
            captureId: 91
            codedId: some text
            actionStatusId: 3
            actionDate: 2018-02-10T09:30Z
            accountCodeActivity: 22
            accountCodeBusinessCentre: 71
            accountCodeObject: 43
            accountCodeOutput: 31
            accountCodeProjectNo: 16
            invoiceNumber: some text
            invoiceDate: 2018-02-10T09:30Z
            assetDescription: some text
            ownerId: 42
            maintainerId: 98
            assetConditionId: 54
            assessmentMethodId: 0
            newAssetComment: some text
            assetTypeGradeTypeDescId: 52
            assetTypeGradeTypeId: 26
            assetTypeDescriptionId: 43
            assetTypeNameId: 96
            assetTypeClassId: 44
            assetTypeGroupId: 35
            locationType: 52
            directorateId: 78
            branchId: 91
            managementUnitId: 69
            buildingLocationId: 53
            parkId: 33
            siteId: 25
            subsiteId: 0
            dimensionId: 87
            measureId: 45
            primaryQuantity: 91.51
            registrationPlate: some text
            custodian: some text
            modelId: 71
            makeId: 66
            barcodeTitleId: 51
            disposalId: 14
            disposalReason: some text
            disposalDate: 2018-02-10T09:30Z
            inspectorId: 9
            inspectionDate: 2018-02-10T09:30Z
            agencyCompanyId: 89
            geometry: some text
            heritageRegisterNameId: 36
            imageCount: 6
            isReplaceable: true
          action:
            checkin-url: some text
          checkoutId: 25
        - assetLock:
            assetLockId: 42
            username: some text
            lockDate: 2018-02-10T09:30Z
            mpBatchId: 24
            verifyStatusId: 9
            lockMessage: some text
            assetId: 76
          asset:
            assetId: 67
            readonly: true
            captureId: 77
            codedId: some text
            actionStatusId: 99
            actionDate: 2018-02-10T09:30Z
            accountCodeActivity: 54
            accountCodeBusinessCentre: 65
            accountCodeObject: 61
            accountCodeOutput: 62
            accountCodeProjectNo: 47
            invoiceNumber: some text
            invoiceDate: 2018-02-10T09:30Z
            assetDescription: some text
            ownerId: 84
            maintainerId: 45
            assetConditionId: 98
            assessmentMethodId: 59
            newAssetComment: some text
            assetTypeGradeTypeDescId: 86
            assetTypeGradeTypeId: 14
            assetTypeDescriptionId: 11
            assetTypeNameId: 11
            assetTypeClassId: 1
            assetTypeGroupId: 29
            locationType: 42
            directorateId: 70
            branchId: 40
            managementUnitId: 55
            buildingLocationId: 99
            parkId: 21
            siteId: 43
            subsiteId: 26
            dimensionId: 29
            measureId: 89
            primaryQuantity: 16.64
            registrationPlate: some text
            custodian: some text
            modelId: 13
            makeId: 83
            barcodeTitleId: 62
            disposalId: 79
            disposalReason: some text
            disposalDate: 2018-02-10T09:30Z
            inspectorId: 45
            inspectionDate: 2018-02-10T09:30Z
            agencyCompanyId: 41
            geometry: some text
            heritageRegisterNameId: 43
            imageCount: 45
            isReplaceable: true
          action:
            checkin-url: some text
          checkoutId: 56
        navigation:
          nextPage: some text
          prevPage: some text
    asset-summary:
      description: Checkout Summary data type
      required: []
      type: object
      properties:
        allAssetIds:
          description: Contains an Array of Integers of the asset ids
          type: array
          items:
            type: integer
        lockedAssets:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/asset-lock'
        totalAssets:
          description: ""
          type: integer
        totalLineAssets:
          description: ""
          type: integer
        totalNonspatialAssets:
          description: ""
          type: integer
        totalPointAssets:
          description: ""
          type: integer
        totalPolyAssets:
          description: ""
          type: integer
      example:
        allAssetIds:
        - 10
        - 34
        lockedAssets:
        - assetLockId: 52
          username: some text
          lockDate: 2018-02-10T09:30Z
          mpBatchId: 20
          verifyStatusId: 68
          lockMessage: some text
          assetId: 10
        - assetLockId: 72
          username: some text
          lockDate: 2018-02-10T09:30Z
          mpBatchId: 91
          verifyStatusId: 27
          lockMessage: some text
          assetId: 34
        totalAssets: 2
        totalLineAssets: 1
        totalNonspatialAssets: 1
        totalPointAssets: 0
        totalPolyAssets: 0
    asset-detail:
      description: ""
      type: object
      properties:
        assetLock:
          $ref: '#/components/schemas/asset-lock'
          description: ""
        asset:
          $ref: '#/components/schemas/asset'
          description: ""
        action:
          $ref: '#/components/schemas/action-links'
          description: Contains information about URL to update an asset (checkin).  Will
            be available only if the asset is checkedout
        checkoutId:
          description: Available only if the asset is currently checked out
          type: integer
      example:
        assetLock:
          assetLockId: 58
          username: some text
          lockDate: 2018-02-10T09:30Z
          mpBatchId: 51
          verifyStatusId: 89
          lockMessage: some text
          assetId: 90
        asset:
          assetId: 90
          readonly: true
          captureId: 21
          codedId: some text
          actionStatusId: 30
          actionDate: 2018-02-10T09:30Z
          accountCodeActivity: 74
          accountCodeBusinessCentre: 66
          accountCodeObject: 65
          accountCodeOutput: 26
          accountCodeProjectNo: 90
          invoiceNumber: some text
          invoiceDate: 2018-02-10T09:30Z
          assetDescription: some text
          ownerId: 79
          maintainerId: 6
          assetConditionId: 32
          assessmentMethodId: 24
          newAssetComment: some text
          assetTypeGradeTypeDescId: 39
          assetTypeGradeTypeId: 42
          assetTypeDescriptionId: 28
          assetTypeNameId: 96
          assetTypeClassId: 13
          assetTypeGroupId: 7
          locationType: 12
          directorateId: 43
          branchId: 60
          managementUnitId: 69
          buildingLocationId: 1
          parkId: 0
          siteId: 44
          subsiteId: 75
          dimensionId: 15
          measureId: 38
          primaryQuantity: 3.94
          registrationPlate: some text
          custodian: some text
          modelId: 30
          makeId: 98
          barcodeTitleId: 44
          disposalId: 92
          disposalReason: some text
          disposalDate: 2018-02-10T09:30Z
          inspectorId: 82
          inspectionDate: 2018-02-10T09:30Z
          agencyCompanyId: 76
          geometry: some text
          heritageRegisterNameId: 9
          imageCount: 58
          isReplaceable: true
        action:
          checkin-url: /assets/asset/
        checkoutId: 73
    navigation-links:
      description: Contains page navigation URLs
      type: object
      properties:
        nextPage:
          description: URL for navigating to the next page
          type: string
        prevPage:
          description: URL for navigating to the previous page
          type: string
      example:
        nextPage: /assets/?parkId=225&offset=10&limit=25
        prevPage: /assets/?parkId=225&offset=8&limit=25
    lookup-detail:
      description: ""
      required:
      - id
      type: object
      properties:
        id:
          description: ""
          type: integer
        parentId:
          description: ""
          type: integer
        value:
          description: ""
          type: string
      example:
        id: 74
        parentId: 99
        value: some text
    response-message:
      title: Root Type for response-messages
      description: Response data type when a request is not successful
      type: object
      properties:
        messages:
          type: array
          items:
            type: string
      example:
        messages:
        - Some message will be displayed here explaining the reason for failure.
    image:
      description: Image data type
      required:
      - captureDateTime
      - imageTitle
      - fileName
      - assetId
      - imageName
      type: object
      properties:
        imageId:
          description: Unique Id for the image
          type: integer
        captureDateTime:
          format: date-time
          description: Capture Date and Time for the image.  The datetime string must
            follow the ISO8601 format "yyyy-MM-dd'T'HH:mm:ss±hh:mm"
          type: string
        imageDescription:
          description: Description about the image
          type: string
        imageTitle:
          description: Title for the image
          type: string
        fileName:
          description: Filename of the image, as stored in the file system
          type: string
        assetId:
          description: Asset Id of the asset that this image is related to.
          type: integer
        imageName:
          description: Unique file name for the image as stored in the file system
          type: string
      example:
        imageId: 66
        captureDateTime: 2018-02-10T09:30:00+9:30
        imageDescription: some text
        imageTitle: some text
        fileName: 123456.jpg
        assetId: 57
        imageName: 12346.jpg
  securitySchemes:
    HTTP-Basic:
      scheme: basic
      type: http
      description: HTTP-Basic
security:
- HTTP-Basic: []
tags:
- name: asset-apis
  description: APIs for interacting with assets
- name: park-apis
  description: APIs for interacting with parks
- name: lookup-apis
  description: APIs for look-up data

